# override.yaml.tpl
# NOTE: This file is auto-generated by Terraform during `terraform apply`.
# Manual edits will be overwritten.

global:
  enabled: true
  tlsDisable: ${!is_vault_tls_enabled}

injector:
  enabled: true
%{ if !is_vault_affinity_enabled }
  affinity: {}
%{ endif }

%{ if is_vault_ui_enabled }
ui:
  enabled: ${is_vault_ui_enabled}
%{ endif }

server:
  logLevel: "debug"
%{ if is_vault_enterprise }
  enterpriseLicense:
    secretName: "${vault_license_secret_name}"
    secretKey: "license.hclic"
  image:
    repository: hashicorp/vault-enterprise
    tag: "${vault_version}-ent"
%{ endif }

%{ if !is_vault_enterprise }
  image:
    repository: hashicorp/vault
    tag: "${vault_version}"
%{ endif }
%{ if is_vault_tls_enabled }
  extraEnvironmentVars:
    VAULT_CACERT: /vault/userconfig/vault-tls/ca.crt
    VAULT_TLSCERT: /vault/userconfig/vault-tls/tls.crt
    VAULT_TLSKEY: /vault/userconfig/vault-tls/tls.key
%{ if is_vault_mtls_enabled }
    VAULT_CLIENT_CERT: /vault/clientconfig/vault-tls/tls.crt
    VAULT_CLIENT_KEY: /vault/clientconfig/vault-tls/tls.key
    VAULT_CACERT: /vault/clientconfig/vault-tls/ca.crt
%{ endif }
%{ if is_vault_aws_kms_enabled }
    AWS_SHARED_CREDENTIALS_FILE: /vault/userconfig/${vault_aws_cred_cfm}/credentials
%{ endif }

  volumes:
    - name: userconfig-vault-tls
      secret:
        defaultMode: 420
        secretName: "${vault_server_tls_secret_name}"
%{ if is_vault_mtls_enabled }
    - name: userconfig-vault-client-tls
      secret:
        defaultMode: 420
        secretName: "${vault_client_tls_secret_name}" 
%{ endif }

  volumeMounts:
    - mountPath: /vault/userconfig/vault-tls
      name: userconfig-vault-tls
      readOnly: true
%{ if is_vault_mtls_enabled }
    - mountPath: /vault/clientconfig/vault-tls   # new mount path for client certs
      name: userconfig-vault-client-tls
      readOnly: true
%{ endif }
%{ endif }

%{ if is_vault_aws_kms_enabled }
  extraVolumes:
    - type: configMap
      name: "${vault_aws_cred_cfm}"
      path: null # default is `/vault/userconfig`
%{ endif }

%{ if !is_vault_affinity_enabled }
  affinity: {}
%{ endif }

  standalone:
    enabled: false
  affinity: ""

  ha:
    enabled: true
    replicas: ${vault_replicas}
    raft:
      enabled: true
      setNodeId: true
      config: |
        cluster_name = "vault-integrated-storage"
        ui = true
        listener "tcp" {
          address         = "[::]:8200"
          cluster_address = "[::]:8201"
%{ if is_vault_tls_enabled }
          tls_cert_file = "/vault/userconfig/vault-tls/tls.crt"
          tls_key_file  = "/vault/userconfig/vault-tls/tls.key"
          #tls_client_ca_file = "/vault/userconfig/vault-tls/ca.crt"
%{ if is_vault_mtls_enabled}
          tls_require_and_verify_client_cert = "true"
          tls_disable_client_certs = "false"
          tls_client_ca_file = "/vault/clientconfig/vault-tls/ca.crt"
%{ endif }
%{ endif }
        }
        storage "raft" {
          path = "/vault/data"
        }
%{ if is_vault_aws_kms_enabled }
        seal "awskms" {
          region     = "${vault_aws_region}"
          kms_key_id = "${vault_kms_key_id}"
        }
%{ endif }
        service_registration "kubernetes" {}

%{ if is_vault_ingress_enabled }
  ingress:
    enabled: ${is_vault_ingress_enabled}
    annotations:
      |
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
%{ if is_vault_mtls_enabled}
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
%{ endif }
    ingressClassName: "nginx"
    hosts:
      - host: "${vault_host}"
        paths: []
    tls:
      - hosts:
          - "${vault_host}"
        secretName: "${vault_server_tls_secret_name}"
%{ endif }
